#include <iostream>
using namespace std;

// Function to find the number of ways to make a sum using given coins
int coinChange(int coins[], int N, int sum) {
    int dp[sum + 1] = {0};  // Create a DP array and initialize it with 0
    dp[0] = 1;  // There's one way to make sum 0 (using no coins)

    // For each coin, update the dp array
    for (int i = 0; i < N; i++) {
        for (int j = coins[i]; j <= sum; j++) {
            dp[j] += dp[j - coins[i]];  // Add the ways to make (j - coin) to dp[j]
        }
    }

    return dp[sum];  // Return the number of ways to make the required sum
}

int main() {
    int coins1[] = {1, 2, 3};
    int sum1 = 4;
    int N1 = sizeof(coins1) / sizeof(coins1[0]);
    cout << "Number of ways to make sum " << sum1 << ": " << coinChange(coins1, N1, sum1) << endl;

    int coins2[] = {2, 5, 3, 6};
    int sum2 = 10;
    int N2 = sizeof(coins2) / sizeof(coins2[0]);
    cout << "Number of ways to make sum " << sum2 << ": " << coinChange(coins2, N2, sum2) << endl;

    return 0;
}
#include <iostream>
using namespace std;

// Function to find the number of ways to make a sum using given coins
int coinChange(int coins[], int N, int sum) {
    int dp[sum + 1] = {0};  // Create a DP array and initialize it with 0
    dp[0] = 1;  // There's one way to make sum 0 (using no coins)

    // For each coin, update the dp array
    for (int i = 0; i < N; i++) {
        for (int j = coins[i]; j <= sum; j++) {
            dp[j] += dp[j - coins[i]];  // Add the ways to make (j - coin) to dp[j]
        }
    }

    return dp[sum];  // Return the number of ways to make the required sum
}

int main() {
    int coins1[] = {1, 2, 3};
    int sum1 = 4;
    int N1 = sizeof(coins1) / sizeof(coins1[0]);
    cout << "Number of ways to make sum " << sum1 << ": " << coinChange(coins1, N1, sum1) << endl;

    int coins2[] = {2, 5, 3, 6};
    int sum2 = 10;
    int N2 = sizeof(coins2) / sizeof(coins2[0]);
    cout << "Number of ways to make sum " << sum2 << ": " << coinChange(coins2, N2, sum2) << endl;

    return 0;
}
